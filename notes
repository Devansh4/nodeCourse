0.
Lec29
.gitignore to exclude node_modules/
npm i to install all node_modules from root folder

1.
Lec30
Semantic Versioning: Major update.Minor Update.Patch
^4.13.6 = Carat character. npm i will install any version with same major verion or 4.x
~1.8.3 - Tilde character. npm i will install version 1.8.x
If none of the above character, the exact version will get installed.

2.
Lec31
npm list to see al the dependencies and their exact versions
npm list --depth=0 to see just the dependencies of our application

3.
Lec32
npm view mongoose dependencies to view all dependencies of mongoose instead of viewing its package.json
npm view mongoose versions to view all its versions

4.
Lec33
npm i mongoose@2.4.2 to install the specific version

4.
Lec34
npm outdated to see all current and latest versions
npm update to update all the versions
npm-check-updates
ncu -u to update package.json

5.
Lec35
npm i jshint --save-dev to save it as a developer dependency. These are dependencies only used for development, like testing, and should not go into production environment as thay are not used for running the application.

6.
Lec36
npm un mongoose to uninstall the mongoose package

7.
Lec37
npm -g outdated to see all the outdated folders

8.
Lec38
npm init --yes to make package.json with all default values
npm login
npm publish
npm i lion-lib-4
can use that package now by require

9. 
Lec39
npm version major(or minor or patch) to update the version number in lion-lib-4
npm publish

10.
Lec42
endpoints are called resources in REST
HTTP methods:   Create - POST
                Read - GET
                Update - PUT
                Delete - DELETE
                
11.
Lec45
sudo npm i -g nodemon to install node monitor

12.
Lec46
Set environment variables by executing the the export command
export port=5000

13.
Lec50
To check post operations:
Install postman chrome extension
POST->raw->json->type the post request

11.
Lec51
Use npm joi for input validation

12.
Lec57
middleware:
a function that takes a req object and either returns a response to the client or passes the control to another middleware function
eg. every route handler function - terminates the req res cycle
eg. express.json() parse the body of a req(if a json object is present) to a json object. It then passes control to route() handler
Request Processing Pipeline: One or more middleware functions. Can even be custom-made middleware
Every request on our server goes through a middleware function
custom -middleware functions - cross-cutting concerns(logging, authorization etc)

13.
Lec62.
We may need different configurations for different environments. To do this you can either the npm module rc or configurations.
Use a json object to define the default configuration setting and other jsons for the other specific environments that can override the default One
To store passwords etc which should not be visible to the repository, use env variables and not these json files. export app_password=1234
Read these passwords using the config module. use custom-environment-variable.json and remove the properties which we are already getting from one of the configuration files

14.
Lec63.
Instead of using console.log to debug , use the debug package. We can use env var to control the debugging.
export DEBUG=app:startup
To see nothing of the debugging info, use DEBUG=
To see debugging info from multiple namespaces, use export DEBUG=app:startup,app:DEBUG
To see from all, use wildcard. export DEBUG:app:*
Shortcut: To export at the time of running, DEBUG=app:db node index

15.
Lec64.
Use templating engines to send the response as html instead of json
npm i pug
